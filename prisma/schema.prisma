generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model book {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title          String       @db.VarChar(255)
  author         String       @db.VarChar(255)
  price          Int
  published_date DateTime     @db.Date
  isbn           String       @db.VarChar(255)
  bookstore_id   String       @db.Uuid
  created_at     DateTime     @default(now()) @db.Timestamp(6)
  updated_at     DateTime     @default(now()) @db.Timestamp(6)
  bookstore      bookstore    @relation(fields: [bookstore_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  inventory      inventory[]
  order_item     order_item[]
}

model bookstore {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?     @db.VarChar(255)
  name        String      @db.VarChar(255)
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime    @default(now()) @db.Timestamp(6)
  user_id     String      @db.Uuid
  tenant_id   String      @db.VarChar(255)
  book        book[]
  user        user        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  inventory   inventory[]
}

model inventory {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  book_id      String    @db.Uuid
  quantity     Int
  bookstore_id String    @db.Uuid
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  book         book      @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  bookstore    bookstore @relation(fields: [bookstore_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model order {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_date  DateTime     @db.Date
  total_price Int
  user_id     String       @db.Uuid
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  user        user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  order_item  order_item[]
}

model order_item {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quantity   Int
  book_id    String   @db.Uuid
  order_id   String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  book       book     @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  order      order    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String      @unique @db.VarChar(255)
  firstName   String?     @db.VarChar(255)
  lastName    String?     @db.VarChar(255)
  roq_user_id String      @db.VarChar(255)
  tenant_id   String      @db.VarChar(255)
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime    @default(now()) @db.Timestamp(6)
  bookstore   bookstore[]
  order       order[]
}
